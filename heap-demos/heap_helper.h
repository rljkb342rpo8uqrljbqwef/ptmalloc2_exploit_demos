#include  <sys/types.h>
#include  <stdlib.h>
#include  <string.h>
#include  <stdio.h>
#include  <unistd.h>


#define INTERNAL_SIZE_T     size_t
#define INTERNAL_SIZE       sizeof(INTERNAL_SIZE_T)
#define M_CHUNK_ALIGN       2*INTERNAL_SIZE
#define NFASTBINS           10
#define NBINS               128
#define BINMAPSIZE          4

#define MAX_FASTBIN_SIZE    (INTERNAL_SIZE * 2) * 8




typedef struct __malloc_chunk {
    INTERNAL_SIZE_T         prev_size;      /* Size of previous chunk (if free). */
    
    INTERNAL_SIZE_T         size;           /* Size in bytes, including overhead. */
    
    struct malloc_chunk*    fd;             /* double links -- used only if free. */
    
    struct malloc_chunk*    bk;
    
    /* Only used for large blocks: pointer to next larger size. */
    struct malloc_chunk*    fd_nextsize;    /* double links -- used only if free. */
    struct malloc_chunk*    bk_nextsize;

}malloc_chunk, *mfastbinptr, *mchunkptr;



typedef int mutex_t;

typedef struct __malloc_state {
    mutex_t mutex;

    int     flags;

    #if THREAD_STATS
    /* Statistics for locking. Only used if THREAD_STATS is defined. */
    long stat_lock_direct, stat_lock_loop, stat_lock_wait;
    #endif

    /* Fastbins */
    mfastbinptr fastbinsY[NFASTBINS];

    /* Base of the topmost chunk -- not otherwise kept in a bin */
    mchunkptr top;

    /* The remainder from the most recent split of a small request */
    mchunkptr last_remainder;

    /* Normal bins packed as described above */
    mchunkptr bins[NBINS * 2 - 2];

    /* Bitmap of bins */ 
    unsigned int  binmap[BINMAPSIZE];

    /* Linked list */
    struct malloc_state *next;

    #ifdef PER_THREAD
    /* Linked list for free arenas. */
    struct malloc_state *next_free;
    #endif

    /* Memory allocated from the system in this arena. */
    INTERNAL_SIZE_T system_mem;

    INTERNAL_SIZE_T max_system_mem;

}malloc_state, *malloc_state_ptr;

void* malloc_helper(int size);
void free_helper(void* ptr);
malloc_state_ptr dump_malloc_state();

//===========================================================================//


malloc_state_ptr dump_malloc_state()
{
    mchunkptr narmal_bins_chunk_ptr;
    malloc_state_ptr main_malloc_state_ptr;
    void *p1,*p2,*p3;
    int i = 0;

    p1 = malloc(MAX_FASTBIN_SIZE);
    p2 = malloc(MAX_FASTBIN_SIZE);
    p3 = malloc(MAX_FASTBIN_SIZE);

    free(p2);


    narmal_bins_chunk_ptr = (mchunkptr)(*(INTERNAL_SIZE_T*)p2);


    main_malloc_state_ptr = (malloc_state_ptr)((void*)&narmal_bins_chunk_ptr->fd - 
                                            INTERNAL_SIZE - 
                                            INTERNAL_SIZE - 
                                            NFASTBINS * INTERNAL_SIZE - 
                                            sizeof(int) - 
                                            sizeof(mutex_t));

    printf("[+] malloc_state_ptr             :  %p\n", main_malloc_state_ptr);
    printf("[+] malloc_state->mutex          :  %p\n", main_malloc_state_ptr->mutex);
    printf("[+] malloc_state->flags          :  %p\n", main_malloc_state_ptr->flags);
    printf("[+] malloc_state->system_mem     :  %p\n", main_malloc_state_ptr->system_mem);
    printf("[+] malloc_state->max_system_mem :  %p\n", main_malloc_state_ptr->max_system_mem);

    printf("[+] malloc_state->fastbins       :  %p\n", main_malloc_state_ptr->fastbinsY);
    printf("[+] malloc_state->top            :  %p\n", main_malloc_state_ptr->top);
    printf("[+] malloc_state->last_remainder :  %p\n", main_malloc_state_ptr->last_remainder);
    printf("[+] malloc_state->narmal_bins    :  %p\n", main_malloc_state_ptr->bins);

    printf("[+] fastbins:\n");
    for(i=0 ; i<NFASTBINS; i++) {
    printf("[+]     %p    fastbins[%03d]      %p\n", 
            ((void*)main_malloc_state_ptr->fastbinsY)+i*INTERNAL_SIZE, 
            i, 
            main_malloc_state_ptr->fastbinsY[i]);
    }

    printf("[+] normal bins:\n");
    for(i=0 ; i<(NBINS * 2 - 2);) {
    printf("[+]     %p    bins[%03d]          %p    %p\n", 
            ((void*)main_malloc_state_ptr->bins)+i*INTERNAL_SIZE, 
            i/2,
            main_malloc_state_ptr->bins[i],
            main_malloc_state_ptr->bins[i+1]);
    i+=2;
    }    

    free(p1);
    free(p3);
    return main_malloc_state_ptr;

}


void* malloc_helper(int size)
{
    void *ptr = NULL;
    if (size <=0) {
        printf("[-] malloc size == 0\n");
        return ptr;
    }
    ptr = malloc(size);
    if(!ptr) {
        printf("[-] malloc error\n");
        return ptr;        
    }
    printf("[+] malloc: %p\n",ptr);
    return ptr;  
}

void free_helper(void* ptr)
{
    if (!ptr) {
        printf("[-] free pointer == NULL\n");
        return;
    }
    free(ptr);
    printf("[+] free: %p\n",ptr);
}

